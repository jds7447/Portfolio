Application.java
    /*
    @SpringBootApplication
        @SpringBootApplication 으로 인해 스프링 부트의 자동 설정, 스프링 Bean 읽기와 생성을 모두 자동으로 설정된다
        특히 @SpringBootApplication 이 있는 위치부터 설정을 읽어가기 때문에 이 클래스는 항상 프로젝트 최상단에 위치해야 한다
    */
    /*
    SpringApplication.run(Application.class, args)
        main 메서드에서 실행하는 SpringApplication.run 으로 인해 내장 WAS(Web Application Server)를 실행
        내장 WAS는 별도로 외부에 WAS를 두지 않고 애플리케이션을 실행할 때 내부에서 WAS를 실행
        내장 WAS로 인해 서버에 톰캣(TomCat == WAS)을 설치할 필요가 없게 되고, 스프링 부트로 만들어지 Jar(실행 가능한 Java 패키징 파일) 파일로 실행 가능
        스프링 부트에서만 내장 WAS를 사용할 수 있는 것은 아니지만 스프링 부트에서는 내장 WAS 사용을 권장한다
        내장 WAS를 사용하면 "언제 어디서나 같은 환경에서 스프링 부트를 배포" 할 수 있기 때문이다

        외장 WAS를 쓴다고 하면 모든 서버는 WAS의 종류와 버전, 설정을 일치시켜야 하기 때문에 변경, 확장에 불리하다
    */



HelloController.java
    /*
    @RestController
        컨트롤러를 JSON을 반환하는 큰터를러로 만듦
        예전에는 @ResponseBody를 각 메서드마다 선언했던 것을 한 번에 사용할 수 있게 해준다고 생각하면 됨
    */
    /*
    @Getmapping
        HTTP Method인 Get의 요청을 받을 수 있는 API를 만듦
        예전에는 @RequestMapping(method = RequestMethod.GET) 으로 사용되었음
        이제 이 프로젝트는 /hello로 요청이 오면 문자열 hello를 반환하게 됨
    */
    /*
    @RequestParam
        외부에서 API로 넘긴 파라미터를 가져오는 어노테이션
        여기서는 외부에서 name (@RequestParam("name")) 이란 이름으로 넘긴 파라미터를 메서드 파라미터 name(String name)에 저장하게 된다
    */



HelloControllerTest.java
    /*
    @RunWith(SpringRunner.class)
        테스트를 진행할 떄 JUnit에 내장된 실행자 외에 다른 실행자를 실행시킨다
        여기서는 SpringRunner라는 스프링 실행자를 사용
        즉, 스프링 부트 테스트와 JUnit 사이에 연결자 역할을 한다
    */
    /*
    @WebMvcTest
        여러 스프링 테스트 어노테이션 중 Web(Spring MVC)에 집중할 수 있는 어노테이션
        선언할 경우 @Controller, @ControllerAdvice 등을 사용할 수 있다
        단, @Service, @Component, @Repository 등은 사용할 수 없다
        여기서는 컨트롤러만 사용하기 때문에 선언
    */
    /*
    @Autowired
        스프링이 관리하는 빈(Bean)을 주입 (필드 주입 방식)
    */
    /*
    private MockMvc mvc
        웹 API를 테스트할 때 사용
        스프링 MVC 테스트의 시작점
        이 클래스를 통해 HTTP GET, POST 등에 대한 API 테스트를 할 수 있다
    */
    /*
    mvc.perform(get("/hello"))
        MockMvc를 통해 /hello 주소로 HTTP GET 요청을 한다
        체이닝이 지원되어 아래와 같이 여러 검증 기능을 이어서 선언 가능
    */
    /*
    .andExpect(status().isOk())
        mvc.perform의 결과를 검증
        HTTP Header의 Status를 검증
        우리가 흔히 알고있는 200, 404, 500 등의 상태를 검증
        여기선 OK 즉, 200인지 아닌지를 검증
    */
    /*
    .andExpect(content().string(hello))
        mvc.perform의 결과를 검증
        응답 본문의 내용을 검증
        Controller에서 "hello"를 리턴하기 때문에 이 값이 맞는지 검증
    */
    /*
    param
        API 테스트할 때 사용될 요청 파라미터를 설정
        단, 값은 String만 허용
        그래서 숫자/날짜 등의 데이터도 등록할 때는 문자열로 변경해야만 가능
    */
    /*
    jsonPath
        JSON 응답값을 필드별로 검증할 수 있는 메서드
        $를 기준으로 필드명을 명시
        여기서는 name과 amount를 검증하니 $.name, $.amount 로 검증
    */



HelloResponseDto.java
    /*
    @Getter
        선언된 모든 필드의 get 메서드를 생성
    */
    /*
    @RequiredArgsConstructor
        선언된 모든 final 필드가 포함된 생성자를 생성 (@NotNull 이 붙은 필드 포함)
        final이 없는 필드는 생성자에 포함되지 않는다
    */



HelloResponseDtoTest.java
    /*
    assertThat
        assertj라는 테스트 검증 라이브러리의 검증 메서드
        검증하고 싶은 대상을 메서드 인자로 받는다
        메서드 체이닝이 지원되어 isEqualTo와 같이 메서드를 이어서 사용 가능
    */
    /*
    isEqualTo
        assertj의 동등 비교 메서드
        assertThat에 있는 값과 isEqualTo의 값을 비교해서 같을 때만 성공
    */

    /*
    Junit의 기본 assertThat이 아닌 assertj의 assertThat을 사용
    assertj 역시 Junit에서 자동으로 라이브러리 등록을 해줌

    Junit 과 비교하여 assertj의 장점
        CoreMatchers와 달리 추가적으로 라이브러리가 필요하지 않다
            - Junit의 assertThat 을 쓰게 되면 is() 와 같이 CoreMatchers 라이브러리가 필요
        자동완성이 좀 더 확실하게 지원됨
            - IDE 에서는 CoreMatchers와 같은 Matcher 라이브러리의 자동완성 지원이 약함
    */



Posts.java
    /*
    @Entity
        테이블과 일크될 클래스임을 나타냄
        기본값으로 클래스의 카멜케이스 이름을 언더스코어 네이밍(_)으로 테이블 이름을 매칭
        ex) SalesManager.java -->  sales_manager 테이블
    */
    /*
    @ID
        해당 테이블의 PK 필드를 나타냄
    */
    /*
    @GeneratedValue
        PK의 생성 규칙을 나타냄
        스프링 부트 2.0 에서는 GenerationType.IDENTITY 옵션을 추가해야만 auto_increment 가 됨
    */
    /*
    @Column
        테이블의 컬럼을 나타내며 굳이 선언하지 않더라도 해당 클래스의 필드는 모두 컬럼이 된다
        사용하는 이유는 기본값 외에 추가로 변경이 필요한 옵션이 있으면 사용
        문자열의 경우 VARCHAR(255)가 기본값인데, 사이즈를 500으로 늘리고 싶다거나(ex: title), 타입을 TEXT로 변경하고 싶다거나(ex:content) 등의 경우 사용
    */
    /*
    @NoArgsConstructor
        기본 생성자 자동 추가
        public Posts(){} 와 같은 효과
    */
    /*
    @Getter
        클래스 내 모든 필드의 Getter 메서드 자동 생성
    */
    @Builder
        해당 클래스의 빌더 패턴 클래스를 생성
        생성자 상단에 선언 시 생성자에 포함된 필드만 빌더에 포함

        예를 들어,
        public Example(String a, String b) {
            this.a = a;
            this.b = b;
        }
        일반 생성자의 경우 new Example(b, a) 의 형식으로 객체를 생성해도 문제점을 찾기 힘들다

        하지만 빌더 클래스를 이용한 생성자의 경우
        Example.builder()
            .a(a)
            .b(b)
            .build();
        의 형식으로 어느 필드에 어떤 값을 채워야 할지 명확하게 인지할 수 있다
    */



PostsRepositoryTest.java
    /*
    @After
        Junit에서 단위 테스트가 끝날 때마다 수행되는 메서드 지정
        보통은 배포 전 전체 테스트를 수행할 때 테스트 간 데이터 침범을 막기 위해 사용한다
        여러 테스트가 동시에 수행되면 테스트용 데이터베이스인 H2에 데이터가 그대로 남아 있어 다음 테스트 실행 시 테스트가 실패할 수 있음
    */
    /*
    postRepository.save
        테이블 posts에 insert/update 쿼리를 실행
        id 값이 있다면 update가, 없다면 insert 쿼리가 실행됨
    */
    /*
    postsRepository.findAll
        테이블 posts에 있는 모든 데이터를 조회해 오는 메서드
    */
    /*
    @SpringBootTest
        별다른 설정 없이 해당 어노테이션을 사용할 경우 H2 데이터베이스를 자동으로 실행
    */
    /*
    assertThat(확인날짜).isAfter(기준날짜)
        기준날짜보다 확인날짜가 미래이면 true 리턴, 그렇지 않으면 false 리턴
    */



PostsApiControllerTest.java
    /*
    @WebMvcTest 를 사용하지 않은 이유
        @WebMvcTest의 경우 JPA 기능이 작동하지 않음
        Controller와 ControllerAdvice 등 외부 연동과 관련된 부분만 활성화 됨

        JPA 기능까지 한 번에 테스트할 때는 @SpringBootTest 와 TestRestTemplate 를 사용
    */
    /*
    WebEnvironment.RANDOM_PORT
        랜덤 포트 실행
    */
    /*
    @LocalServerPort
        현재 서버의 포트 번호 주입
    */



BaseTimeEntity.java
    /*
    @MappedSuperclass
        JPA Entity 클래스들이 BaseTimeEntity을 상속할 경우 필드들(createdDate, modifiedDate)도 컬럼으로 인식하도록 한다
    */
    /*
    @EntityListeners(AuditingEntityListener.class)
        BaseTimeEntity 클래스에 Auditing 기능을 포함시킨다 (예를 들어 이 클래스를 상속 받은 도메인(Entity 클래스)을 영속성 컨텍스트에 저장하거나 update를 하는 경우를 감시한다)
    */
    /*
    @CreatedDate
        Entity가 생성되어 저장될 때 시간이 자동 저장됨
    */
    /*
    @LastModifiedDate
        조회한 Entity의 값을 변경할 때 시간이 자동 저장됨
    */