현대의 웹 애플리케이션에서 관계형 데이터베이스(RDB)는 빠질 수 없는 요소이다 (Oracle, MySQL, MSSQL 등)
그러다 보니 객체를 관계형 데이터베이스에서 관리하는 것이 중요하다
관계형 데이터베이스가 계속해서 웹 서비스의 중심이 되면서 모든 코드는 SQL 중심이 되어간다
현업 프로젝트 대부분이 애플리케이션 코드보다 SQL로 가득차게 되었다
이는 관계형 데이터베이스가 SQL만 인식할 수 있기 때문인데, SQL로만 가능하니 각 테이블마다 기본적인 CRUD SQL을 매번 생성해야 한다
결국 관계형 데이터베이스를 사용해야 하는 상황에서 SQL은 피할 수 없고, 반복적인 작업을 지속해야 한다

또한 패러다임의 불일치 문제가 있다
관계형 데이터베이스는 어떻게 데이터를 저장할지에 초점이 맞춰진 기술이고
반대로 객체지향 프로그래밍 언어는 메시지를 기반으로 기능과 속성을 한 곳에서 관리하는 기술이다
객체지향 프로그래밍의 상속, 1:N 등 다양한 객체 모델링을 데이터베이스로 구현할 수 없기 때문에
웹 애플리케이션은 점점 데이터베이스 모델링에만 집중하게 된다

이러한 문제점을 해결하기 위해 등장한 것이 JPA이다
JPA는 위처럼 지향하는 바가 다른 2개의 영역(객체지향 프로그래밍 언어와 관계형 데이터베이스)을 중간에서 패러다임 일치를 시켜주기 위한 기술이다

즉, 개발자는 객체지향적으로 프로그래밍을 하고, JPA가 이를 관계형 데이터베이스에 맞게 SQL을 대신 생성하여 실행한다
따라서 개발자는 객체지향적 코드를 표현할 수 있기 때문에 SQL에 종속적인 개발을 피할 수 있다

객체 중심으로 개발을 하면 생산성 향상은 물론 유지 보수하기가 편하다
이러한 이유로 규모가 크고 365일 24시간 대규모 트래픽과 데이터를 가진 서비스에서 JPA는 점점 표준 기술로 자리잡고 있다