Application.java
    /*
    @SpringBootApplication
        @SpringBootApplication 으로 인해 스프링 부트의 자동 설정, 스프링 Bean 읽기와 생성을 모두 자동으로 설정된다
        특히 @SpringBootApplication 이 있는 위치부터 설정을 읽어가기 때문에 이 클래스는 항상 프로젝트 최상단에 위치해야 한다
    */
    /*
    SpringApplication.run(Application.class, args)
        main 메서드에서 실행하는 SpringApplication.run 으로 인해 내장 WAS(Web Application Server)를 실행
        내장 WAS는 별도로 외부에 WAS를 두지 않고 애플리케이션을 실행할 때 내부에서 WAS를 실행
        내장 WAS로 인해 서버에 톰캣(TomCat == WAS)을 설치할 필요가 없게 되고, 스프링 부트로 만들어지 Jar(실행 가능한 Java 패키징 파일) 파일로 실행 가능
        스프링 부트에서만 내장 WAS를 사용할 수 있는 것은 아니지만 스프링 부트에서는 내장 WAS 사용을 권장한다
        내장 WAS를 사용하면 "언제 어디서나 같은 환경에서 스프링 부트를 배포" 할 수 있기 때문이다

        외장 WAS를 쓴다고 하면 모든 서버는 WAS의 종류와 버전, 설정을 일치시켜야 하기 때문에 변경, 확장에 불리하다
    */



HelloController.java
    /*
    @RestController
        컨트롤러를 JSON을 반환하는 큰터를러로 만듦
        예전에는 @ResponseBody를 각 메서드마다 선언했던 것을 한 번에 사용할 수 있게 해준다고 생각하면 됨
    */
    /*
    @Getmapping
        HTTP Method인 Get의 요청을 받을 수 있는 API를 만듦
        예전에는 @RequestMapping(method = RequestMethod.GET) 으로 사용되었음
        이제 이 프로젝트는 /hello로 요청이 오면 문자열 hello를 반환하게 됨
    */



HelloControllerTest.java
    /*
    @RunWith(SpringRunner.class)
        테스트를 진행할 떄 JUnit에 내장된 실행자 외에 다른 실행자를 실행시킨다
        여기서는 SpringRunner라는 스프링 실행자를 사용
        즉, 스프링 부트 테스트와 JUnit 사이에 연결자 역할을 한다
    */
    /*
    @WebMvcTest
        여러 스프링 테스트 어노테이션 중 Web(Spring MVC)에 집중할 수 있는 어노테이션
        선언할 경우 @Controller, @ControllerAdvice 등을 사용할 수 있다
        단, @Service, @Component, @Repository 등은 사용할 수 없다
        여기서는 컨트롤러만 사용하기 때문에 선언
    */
    /*
    @Autowired
        스프링이 관리하는 빈(Bean)을 주입 (필드 주입 방식)
    */
    /*
    private MockMvc mvc
        웹 API를 테스트할 때 사용
        스프링 MVC 테스트의 시작점
        이 클래스를 통해 HTTP GET, POST 등에 대한 API 테스트를 할 수 있다
    */
    /*
    mvc.perform(get("/hello"))
        MockMvc를 통해 /hello 주소로 HTTP GET 요청을 한다
        체이닝이 지원되어 아래와 같이 여러 검증 기능을 이어서 선언 가능
    */
    /*
    .andExpect(status().isOk())
        mvc.perform의 결과를 검증
        HTTP Header의 Status를 검증
        우리가 흔히 알고있는 200, 404, 500 등의 상태를 검증
        여기선 OK 즉, 200인지 아닌지를 검증
    */
    /*
    .andExpect(content().string(hello))
        mvc.perform의 결과를 검증
        응답 본문의 내용을 검증
        Controller에서 "hello"를 리턴하기 때문에 이 값이 맞는지 검증
    */